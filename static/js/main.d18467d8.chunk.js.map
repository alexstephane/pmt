{"version":3,"sources":["logo.svg","components/AllSalesPersonView.js","components/ActivityView.js","components/AllSalesProspectView.js","components/ManagerView.js","components/ManagerController.js","components/NavBar.js","Login.js","components/SalesrepsView.js","components/SalerepsController.js","App.js","reportWebVitals.js","index.js"],"names":["AllSalesPersonView","state","salesperson_id","showHideEdit","showHide","toggleEditForm","handleShow","input","email","lastName","firstName","handleShowHideSPEdit","id","user","password","first","last","setState","handleChange","e","target","name","value","handleInput","event","this","props","allSalespeople","Table","striped","bordered","hover","salespeople","map","salesperson","first_name","last_name","Modal","show","Header","Title","Body","Form","Group","controlId","Label","Control","onChange","type","placeholder","Footer","Button","variant","onClick","updateSalesRep","className","size","deleteRep","handleModalShowHideSp","closeButton","createSalesperson","Component","ActivityView","allActivities","activities","activity","prospect_id","prospect_name","created_by","description","status","AllSalesProspectView","phone","showHideAddActivity","getProgress","manager_id","allProspect","prospects","prospect","ProgressBar","now","updateProspect","handleShowHideAddActivity","as","createActivity","deleteProspect","createProspect","ManagerView","salespersonList","prospectList","activitiesList","EditButton","handleEdit","Container","Row","Col","Card","style","width","Img","src","manager","photo","ListGroup","ListGroupItem","title","onHide","updateUser","ButtonGroup","newSalesrep","ManagerController","fetch","then","r","json","a","m","method","headers","body","JSON","stringify","s","username","pro","localStorage","getItem","sp_id","window","confirm","header","ps_id","NavBar","logout","clear","logged_in","Navbar","bg","Brand","href","Nav","Link","NavLink","to","active","location","pathname","withRouter","Login","handleLoginSubmit","redirect","res","data","authenticated","setItem","token","alert","Dialog","loading","authenticatingUser","error","failedLogin","defaultValue","SalesrepsView","salesrep","SalesrepController","App","exact","path","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","document","getElementById"],"mappings":"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","file":"static/js/main.d18467d8.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.f6340f5a.svg\";","\n\n\nimport React, { Component } from 'react';\nimport { Button, Form, Modal, Table } from 'react-bootstrap';\n\n\nclass AllSalesPersonView extends Component {\n  state = {\n    salesperson_id: \"\",\n    showHideEdit: false,\n    showHide: false,\n    toggleEditForm: false,\n    handleShow: false,\n    input: \"\",\n    email: \"\",\n    lastName: \"\",\n    firstName: \"\"\n\n  }\n\n  componentDidMount() {\n    this.props.allSalespeople()\n  }\n\n\n  handleShowHideSPEdit = (id, email,user, password, first, last,) => {\n    this.setState({\n      showHideEdit: !this.state.showHideEdit,\n      salesperson_id: id,\n      email: email,\n      lastName: last,\n      firstName: first\n    })\n\n  }\n\n  handleModalShowHideSp() {\n    this.setState({\n      showHide: !this.state.showHide\n    })\n  }\n\n  handleChange = (e) => {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  }\n\n\n  handleInput = (event) => {\n    this.setState({\n      input: event.target.value\n    })\n  }\n\n\n  render() {\n\n    return (\n\n      <div id={\"allsview\"}>\n        <br></br>\n        <Table striped bordered hover>\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>First Name</th>\n              <th>Last Name</th>\n              <th>Username</th>\n              <th>Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {this.props.salespeople.map((salesperson) => {\n\n              return (\n\n                <tr key={salesperson.id}>\n\n                  <td>{salesperson.id}</td>\n                  \n                  <td>{salesperson.first_name}</td>\n                  <td>{salesperson.last_name}</td>\n                  <td>{salesperson.email}</td>\n                  \n                  \n                  \n                  <td>\n\n                    {this.state.showHideEdit === true ?\n                      (\n\n                        <Modal show={this.state.showHideEdit}>\n                          <Modal.Header>\n                            <Modal.Title>Edit Sales</Modal.Title>\n                          </Modal.Header>\n                          <Modal.Body>\n                            <Form>\n                              <Form.Group controlId=\"formGroupfirstName\">\n                                <Form.Label>First Name</Form.Label>\n                                <Form.Control\n                                  onChange={this.handleChange}\n                                  type=\"text\"\n                                  name=\"firstName\"\n                                  placeholder=\"First Name\"\n                                  value={this.state.firstName}\n                                />\n                              </Form.Group>\n\n                              <Form.Group controlId=\"formGrouplastName\">\n                                <Form.Label>Last Name</Form.Label>\n                                <Form.Control onChange={this.handleChange}\n                                  type=\"text\" name=\"lastName\"\n                                  placeholder=\"Last Name\"\n                                  value={this.state.lastName} />\n                                <Form.Label>Email address</Form.Label>\n                              </Form.Group>\n\n                              <Form.Group controlId=\"formGrouplastName\">\n                                <Form.Label>Last Name</Form.Label>\n                                <Form.Control onChange={this.handleChange}\n                                  type=\"email\" name=\"email\"\n                                  placeholder=\"email\"\n                                  value={this.state.email} />\n                                <Form.Label>Email address</Form.Label>\n                              </Form.Group>\n\n                            </Form>\n\n                            <Modal.Footer>\n                              <Button\n                                variant=\"secondary\"\n                                onClick={() => this.handleShowHideSPEdit()}>\n                                Close\n                              </Button>\n\n                              <Button\n                                variant=\"primary\"\n                                onClick={(event) => {\n                                  this.props.updateSalesRep(event, this.state.firstName, this.state.lastName, this.state.email, this.state.salesperson_id)\n                                  this.handleShowHideSPEdit()\n                                }}>\n                                Save Changes\n                              </Button>\n                            </Modal.Footer>\n\n                          </Modal.Body>\n                        </Modal>) : null\n                    }\n\n                    <div className=\"mb-2\">\n                      <Button\n                        variant=\"primary\"\n                        onClick={() => this.handleShowHideSPEdit(salesperson.id, salesperson.email, salesperson.first_name, salesperson.last_name)}\n                        size=\"sm\" >\n                        Edit\n                      </Button>\n                      {' '}\n                      <Button\n                        onClick={() => this.props.deleteRep(salesperson.id)}\n                        variant=\"danger\"\n                        size=\"sm\" >\n                        delete\n                      </Button>\n\n                    </div>\n                  </td>\n                </tr>)\n            })}\n          </tbody>\n        </Table>\n\n        <Button variant=\"primary\" onClick={() => this.handleModalShowHideSp()}>Create a new sales person </Button>\n        {\n          this.state.showHide === true ?\n            (\n\n              <Modal show={this.state.showHide} id=\"csm\" >\n                <Modal.Header closeButton onClick={() => this.handleModalShowHideSp()}>\n                  <Modal.Title>Create a sales person</Modal.Title>\n\n                </Modal.Header >\n\n                <Modal.Body>\n                  <Form>\n                    <Form.Group controlId=\"formGroupfirstName\">\n                      <Form.Label>First Name</Form.Label>\n                      <Form.Control\n                        onChange={this.handleChange}\n                        type=\"text\"\n                        name=\"firstName\"\n                        placeholder=\"First Name\"\n                        value={this.state.firstName}\n                      />\n                    </Form.Group>\n\n                    <Form.Group controlId=\"formGrouplastName\">\n                      <Form.Label>Last Name</Form.Label>\n                      <Form.Control onChange={this.handleChange}\n                        type=\"text\" name=\"lastName\"\n                        placeholder=\"Last Name\"\n                        value={this.state.lastName} />\n                    </Form.Group>\n\n                    <Form.Group controlId=\"formGroupEmail\">\n                      <Form.Label>Email</Form.Label>\n                      <Form.Control onChange={this.handleChange}\n                        type=\"email\" name=\"email\"\n                        placeholder=\"email\"\n                        value={this.state.email} />\n                    </Form.Group>\n\n                    <Form.Group controlId=\"formGroupPassword\">\n                      <Form.Label>Password</Form.Label>\n                      <Form.Control onChange={this.handleChange}\n                        type=\"password\" name=\"password\"\n                        placeholder=\"password\"\n                        value={this.state.password} />\n                    </Form.Group>\n                  </Form>\n\n                  <Modal.Footer>\n                    <Button\n                      variant=\"secondary\"\n                      onClick={() => this.handleModalShowHideSp()}>\n                      Close\n                   </Button>\n\n                    <Button\n                      variant=\"primary\"\n                      onClick={(event) => {\n                        this.props.createSalesperson(this.state)\n                        this.handleModalShowHideSp()\n                      }}>\n                      Save Changes\n                    </Button>\n                  </Modal.Footer>\n\n\n                </Modal.Body>\n              </Modal >) : null\n        }\n      </div >\n    )\n\n  }\n\n\n}\n\nexport default AllSalesPersonView","\n\nimport React, { Component } from 'react';\nimport { Table } from 'react-bootstrap';\n\n\n\nclass ActivityView extends Component {\n\n    componentDidMount() {\n        this.props.allActivities()\n    }\n\n    render() {\n\n        return (\n            <div id=\"spa\">\n                <br></br>\n                <Table striped bordered hover>\n                    <thead>\n                        <tr>\n                            <th>#</th>\n                            <th>Activity</th>\n                            <th>Prospect ID</th>\n                            <th>Prospect name</th>\n                            <th>Created_by</th>\n\n                            <th>Description</th>\n                            <th>Status</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.props.activities.map((activity) => {\n                            return (\n\n                                <tr key={activity.id}>\n\n                                    <td>{activity.id} </td>\n                                    <td>{activity.name}</td>\n                                    <td>{activity.prospect_id}</td>\n                                    <td>{activity.prospect_name}</td>\n                                    <td>{activity.created_by}</td>\n                                    <td>{activity.description}</td>\n                                    <td>{activity.status}</td>\n\n                                </tr>\n                            )\n\n                        })\n                        }\n                    </tbody>\n                </Table>\n            </div>\n        )\n\n\n    }\n\n\n}\n\nexport default ActivityView\n\n\n","\n\n\n\n\n\nimport React, { Component } from 'react';\n\nimport { Button, Form, Modal, Table, ProgressBar } from 'react-bootstrap';\n\n\n\nclass AllSalesProspectView extends Component {\n\n\n  state = {\n    prospect_id: \"\",\n    prospect_name: \"\",\n    created_by: \"\",\n    showHideEdit: false,\n    showHide: false,\n    toggleEditForm: false,\n    handleShow: false,\n    input: \"\",\n    email: \"\",\n    lastName: \"\",\n    firstName: \"\",\n    phone: \"\",\n    showHideAddActivity: false,\n    status: \"\",\n    name: \"\",\n    description: \"\"\n  }\n\n\n\n\n\n\n  handleShowHideSPEdit = (id, email, first, last, phone, status, first_name) => {\n    this.setState({\n      showHideEdit: !this.state.showHideEdit,\n      prospect_id: id,\n      prospect_name: first_name,\n      created_by: first_name,\n      email: email,\n      lastName: last,\n      firstName: first,\n      phone: phone,\n      status: status,\n      \n\n    })\n\n  }\n  handleModalShowHideSp() {\n    this.setState({\n      showHide: !this.state.showHide\n    })\n  }\n\n  componentDidMount() {\n    this.setState({\n      salesperson_id: this.props.salesperson_id,\n      manager_id: this.props.manager_id\n    })\n    this.props.allProspect()\n  }\n\n\n  handleShowHideAddActivity(id, first_name, last_name) {\n\n    this.setState({\n      showHideAddActivity: !this.state.showHideAddActivity,\n      prospect_id: id,\n      prospect_name: first_name + \" \" + last_name,\n    })\n\n  }\n\n  handleChange = (e) => {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  }\n\n\n  handleInput = (event) => {\n    this.setState({\n      input: event.target.value\n    })\n  }\n\n\n  getProgress = (status) => {\n    switch (status) {\n      case \"open\":\n        return 30\n      case \"working\":\n        return 60\n      case \"closed\":\n        return 100\n      default:\n        return 30\n    }\n\n\n  }\n\n\n\n  render() {\n    return (\n      <div id=\"nike\">\n        <br></br>\n        <Table striped bordered hover>\n          <thead>\n            <tr>\n              <th>First Name</th>\n              <th>Last Name</th>\n              <th>email</th>\n              <th>phone</th>\n              <th>status</th>\n              <th>created_by</th>\n              <th>Progress</th>\n              <th>Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n\n            {this.props.prospects.map((prospect) => {\n\n              return (\n\n                <tr key={prospect.id}>\n\n                  <td>{prospect.first_name}</td>\n                  <td>{prospect.last_name}</td>\n                  <td>{prospect.email}</td>\n                  <td>{prospect.phone}</td>\n                  <td>{prospect.status}</td>\n                  <td>{prospect.created_by}</td>\n                  <td><ProgressBar now={this.getProgress(prospect.status)} /></td>\n                  <td>\n\n                    <Modal show={this.state.showHideEdit}>\n                      <Modal.Header>\n                        <Modal.Title>Edit</Modal.Title>\n                      </Modal.Header>\n                      <Modal.Body>\n                        <Form>\n                          <Form.Group controlId=\"formGroupfirstName\">\n                            <Form.Label>First Name</Form.Label>\n                            <Form.Control\n                              onChange={this.handleChange}\n                              type=\"text\"\n                              name=\"firstName\"\n                              value={this.state.firstName}\n                            />\n                          </Form.Group>\n\n                          <Form.Group controlId=\"formGrouplastName\">\n                            <Form.Label>Last Name</Form.Label>\n                            <Form.Control onChange={this.handleChange}\n                              type=\"text\" name=\"lastName\"\n                              value={this.state.lastName} />\n                          </Form.Group>\n\n                          <Form.Group controlId=\"formGroupEmail\">\n                            <Form.Label>Last Name</Form.Label>\n                            <Form.Control\n                              onChange={this.handleChange}\n                              type=\"email\"\n                              name=\"email\"\n                              value={this.state.email} />\n                          </Form.Group>\n\n                          <Form.Group controlId=\"formGroupPhone\">\n                            <Form.Label>phone</Form.Label>\n                            <Form.Control\n                              onChange={this.handleChange}\n                              type=\"text\"\n                              name=\"phone\"\n                              value={this.state.phone}\n                            />\n                          </Form.Group>\n\n\n                          <Form.Group controlId=\"formGroupStatus\">\n                            <Form.Label>status</Form.Label>\n                            <Form.Control\n                              onChange={this.handleChange}\n                              type=\"text\"\n                              name=\"status\"\n                              value={this.state.status}\n                            />\n                          </Form.Group>\n\n                        </Form>\n\n                        <Modal.Footer>\n                          <Button\n                            variant=\"secondary\"\n                            onClick={() => this.handleShowHideSPEdit()}>\n                            Close\n                              </Button>\n\n                          <Button\n                            variant=\"primary\"\n                            onClick={(event) => {\n                              this.props.updateProspect(event, this.state.firstName, this.state.lastName, this.state.email, this.state.phone, this.state.status, this.state.prospect_id, this.state.created_by, this.state.prospect_name)\n                              this.handleShowHideSPEdit()\n                            }}>\n                            Save Changes\n                               </Button>\n                        </Modal.Footer>\n                      </Modal.Body>\n                    </Modal>\n\n\n                    {\n                      <Modal show={this.state.showHideAddActivity}>\n                        <Modal.Header closeButton onClick={() => this.handleShowHideAddActivity()}>\n                          <Modal.Title>Create A New Activity</Modal.Title>\n\n                        </Modal.Header>\n\n                        <Modal.Body>\n                          <Form>\n                            <Form.Group controlId=\"formGroupName\">\n                              <Form.Label>Activity</Form.Label>\n                              <Form.Control\n                                onChange={this.handleChange}\n                                type=\"text\"\n                                name=\"name\"\n                                value={this.state.name}\n                              />\n                            </Form.Group>\n\n                            <Form.Group controlId=\"formGroupStatus\">\n                              <Form.Label>status</Form.Label>\n                              <Form.Control\n                                onChange={this.handleChange}\n                                type=\"text\"\n                                name=\"status\"\n                                value={this.state.status}\n                              />\n                            </Form.Group>\n\n                            <Form.Group controlId=\"formGroupDescription\">\n                              <Form.Label>description</Form.Label>\n                              <Form.Control\n                                onChange={this.handleChange}\n                                as=\"textarea\"\n                                name=\"description\"\n                                value={this.state.description}\n                              />\n\n                            </Form.Group>\n\n                          </Form>\n\n                          <Modal.Footer>\n                            <Button\n                              variant=\"secondary\"\n                              onClick={() => this.handleShowHideAddActivity()}>\n                              Close\n                                 </Button>\n\n                            <Button\n                              variant=\"primary\"\n                              onClick={(event) => {\n                                this.props.createActivity(this.state)\n                                this.handleShowHideAddActivity()\n                              }}>\n                              Save Changes\n                                 </Button>\n                          </Modal.Footer>\n\n\n                        </Modal.Body>\n                      </Modal>\n                    }\n\n                    <div>\n                      <Button\n                        variant=\"primary\"\n                        onClick={() => this.handleShowHideSPEdit(prospect.id, prospect.email, prospect.first_name, prospect.last_name, prospect.phone, prospect.status)}\n                        size=\"sm\"\n                      >\n                        Edit\n                      </Button>{'  '}\n\n                      <Button\n                        onClick={() => this.handleShowHideAddActivity(prospect.id, prospect.first_name, prospect.last_name)}\n                        variant=\"info\"\n                        size=\"sm\"\n                      >\n                        Add Activity\n                      </Button>{'  '}\n\n                      <Button\n                        onClick={() => this.props.deleteProspect(prospect.id)}\n                        variant=\"danger\"\n                        size=\"sm\" >\n                        delete\n                      </Button>\n                    </div>\n\n                  </td>\n                </tr>)\n            })}\n          </tbody>\n        </Table>\n\n        <Button variant=\"primary\" onClick={() => this.handleModalShowHideSp()}>Create a new prospect </Button>\n\n        <Modal show={this.state.showHide}>\n          <Modal.Header closeButton onClick={() => this.handleModalShowHideSp()}>\n            <Modal.Title>Create a prospect</Modal.Title>\n\n          </Modal.Header>\n\n          <Modal.Body>\n            <Form>\n              <Form.Group controlId=\"formGroupfirstName\">\n                <Form.Label>First Name</Form.Label>\n                <Form.Control\n                  onChange={this.handleChange}\n                  type=\"text\"\n                  name=\"firstName\"\n                  value={this.state.firstName}\n                />\n              </Form.Group>\n\n              <Form.Group controlId=\"formGrouplastName\">\n                <Form.Label>Last Name</Form.Label>\n                <Form.Control\n                  onChange={this.handleChange}\n                  type=\"text\"\n                  name=\"lastName\"\n                  value={this.state.lastName} />\n              </Form.Group>\n\n              <Form.Group controlId=\"formGroupEmail\">\n                <Form.Label>Email </Form.Label>\n                <Form.Control\n                  onChange={this.handleChange}\n                  type=\"text\"\n                  name=\"email\"\n                  value={this.state.email} />\n              </Form.Group>\n\n              <Form.Group controlId=\"formGroupPhone\">\n                <Form.Label>phone</Form.Label>\n                <Form.Control\n                  onChange={this.handleChange}\n                  type=\"text\"\n                  name=\"phone\"\n                  value={this.state.phone} />\n              </Form.Group>\n\n              <Form.Group controlId=\"formGroupStatus\">\n                <Form.Label>status</Form.Label>\n                <Form.Control\n                  onChange={this.handleChange}\n                  type=\"text\"\n                  name=\"status\"\n                  value={this.state.status} />\n              </Form.Group>\n\n            </Form>\n\n            <Modal.Footer>\n              <Button\n                variant=\"secondary\"\n                onClick={() => this.handleModalShowHideSp()}>\n                Close\n                    </Button>\n\n              <Button\n                variant=\"primary\"\n                onClick={(event) => {\n                  this.props.createProspect(this.state)\n                  this.handleModalShowHideSp()\n                }}>\n                Save Changes\n                    </Button>\n            </Modal.Footer>\n\n\n          </Modal.Body>\n        </Modal>\n      </div >\n    )\n\n  }\n\n\n}\n\nexport default AllSalesProspectView\n","\nimport React, { Component } from 'react';\nimport AllSalesPersonView from \"./AllSalesPersonView\"\nimport ActivityView from \"./ActivityView\"\nimport AllSalesProspectView from \"./AllSalesProspectView\"\nimport { Button, Form, ListGroup, Modal, Card, ListGroupItem, Container, Row, Col, ButtonGroup } from 'react-bootstrap';\n\n\n\n\nclass ManagerView extends Component {\n\n    state = {\n        salespersonList: false,\n        prospectList: false,\n        activitiesList: false,\n        handleShowHideSPEdit: false,\n        handleShow: false,\n        EditButton: false,\n        email: \"\",\n        lastName: \"\",\n        firstName: \"\"\n\n    }\n\n    componentDidMount() {\n        this.props.allSalespeople()\n    }\n\n\n    salespersonList = () => {\n        this.setState({\n            salespersonList: !this.state.salespersonList,\n            prospectList: false,\n            activitiesList: false\n\n        })\n    }\n\n    handleEdit = () => {\n        this.setState({\n            EditButton: !this.state.EditButton,\n        })\n    }\n\n    handleShowHideSPEdit() {\n\n        this.setState({\n            showHide: !this.state.showHide\n        })\n    }\n\n    prospectList = () => {\n        this.setState({\n            prospectList: !this.state.prospectList,\n            salespersonList: false,\n            activitiesList: false\n\n        })\n    }\n\n    activitiesList = () => {\n        this.setState({\n            activitiesList: !this.state.activitiesList,\n            prospectList: false,\n            salespersonList: false\n        })\n    }\n\n\n\n\n    handleShow = () => {\n\n        this.setState({\n            handleShow: !this.state.handleShow\n        })\n    }\n\n    handleChange = (e) => {\n\n        this.setState({ [e.target.name]: e.target.value });\n    }\n\n    render() {\n\n        return (\n            <div >\n\n                <Container >\n                    <Row id=\"mvp\">\n                        <div>\n                            <Col>\n                                <Card id=\"profile\" style={{ width: '25rem' }}>\n                                    <Card.Img variant=\"top\" src={this.props.manager.photo} />\n                                    <Card.Body>\n                                        <Card.Title>\n                                            {this.props.manager.first_name} {this.props.manager.last_name}\n                                        </Card.Title>\n                                    </Card.Body>\n                                    <ListGroup\n                                        className=\"list-group-flush\">\n                                        <ListGroupItem>\n                                            Title: {this.props.manager.title}\n                                        </ListGroupItem>\n                                        <ListGroupItem>\n                                            Email address: {this.props.manager.email}\n                                        </ListGroupItem>\n                                    </ListGroup>\n\n                                    <Card.Body>\n                                        <Button\n                                            variant=\"primary\"\n                                            onClick={() => this.handleShowHideSPEdit()}>\n                                            Edit\n                                        </Button>\n\n                                        {this.state.showHide === true ?\n                                            (\n                                                <Modal\n                                                    show={this.state.showHide}\n                                                    onHide={this.handleShow}>\n\n                                                    <Modal.Header closeButton>\n                                                        <Modal.Title>Modal heading</Modal.Title>\n                                                    </Modal.Header>\n\n                                                    <Modal.Body>\n                                                        <Form>\n                                                            <Form.Group controlId=\"formGroupfirstName\">\n                                                                <Form.Label>First Name</Form.Label>\n                                                                <Form.Control\n                                                                    onChange={this.handleChange}\n                                                                    type=\"text\"\n                                                                    name=\"firstName\"\n                                                                    placeholder=\"First Name\"\n                                                                    value={this.state.firstName}\n                                                                />\n                                                            </Form.Group>\n\n                                                            <Form.Group controlId=\"formGrouplastName\">\n                                                                <Form.Label>Last Name</Form.Label>\n                                                                <Form.Control\n                                                                    onChange={this.handleChange}\n                                                                    type=\"text\"\n                                                                    name=\"lastName\"\n                                                                    placeholder=\"Last Name\"\n                                                                    value={this.state.lastName}\n                                                                />\n                                                            </Form.Group>\n\n                                                            <Form.Group controlId=\"formGroupEmail\">\n                                                                <Form.Label>Email</Form.Label>\n                                                                <Form.Control\n                                                                    onChange={this.handleChange}\n                                                                    type=\"email\"\n                                                                    placeholder=\"Enter email\"\n                                                                    name=\"email\"\n                                                                    value={this.state.email}\n                                                                />\n                                                            </Form.Group>\n\n                                                        </Form>\n\n                                                        <Modal.Footer>\n                                                            <Button\n                                                                variant=\"secondary\"\n                                                                onClick={() => this.handleShowHideSPEdit()\n                                                                }>\n                                                                Close\n                                                            </Button>\n\n                                                            <Button\n                                                                variant=\"primary\" onClick={(event) => {\n                                                                    this.props.updateUser(event, this.state.firstName, this.state.lastName, this.state.email, this.props.manager.id)\n                                                                    this.handleShowHideSPEdit()\n                                                                }}>\n                                                                Save Changes\n                                                            </Button>\n\n                                                        </Modal.Footer>\n                                                    </Modal.Body>\n                                                </Modal>) : null}\n                                    </Card.Body>\n                                </Card>\n                            </Col>\n                        </div>\n                    </Row>\n\n                    <Row>\n                        <div>\n                            <Col id=\"allsb\" >\n                                <div>\n                                    <div>\n                                        <ButtonGroup className=\"mb-2\" >\n\n\n                                            <Button id='asp1'\n                                                onClick={this.salespersonList}\n                                                variant=\"primary\"> All Sales People\n                                            </Button>\n                                            {'  '}\n                                            <Button id=\"asp2\"\n                                                onClick={this.prospectList}\n                                                variant=\"primary\"  > All Prospects\n                                            </Button>\n                                            {'  '}\n                                            <Button id=\"ac1\"\n                                                onClick={this.activitiesList}\n                                                variant=\"primary\"  > All Activities\n                                            </Button>\n                                        </ButtonGroup>\n                                    </div>\n                                </div>\n                            </Col>\n                        </div>\n                    </Row>\n                    {\n                        this.state.salespersonList === true ?\n                            (<AllSalesPersonView\n                                salespeople={this.props.salespeople}\n                                allSalespeople={this.props.allSalespeople}\n                                updateUser={this.updateUser}\n                                updateSalesRep={this.props.updateSalesRep}\n                                createSalesperson={this.props.createSalesperson}\n                                newSalesrep={this.state.newSalesrep}\n                                deleteRep={this.props.deleteRep} />) : null\n                    }\n\n                    {\n                        this.state.prospectList === true ?\n                            (<AllSalesProspectView\n                                allProspect={this.props.allProspect}\n                                prospects={this.props.prospects}\n                                updateProspect={this.props.updateProspect}\n                                deleteProspect={this.props.deleteProspect}\n                                createProspect={this.props.createProspect}\n                                createActivity={this.props.createActivity}\n\n                            />) : null\n                    }\n\n\n                    {\n                        this.state.activitiesList === true ?\n                            (<ActivityView\n                                allActivities={this.props.allActivities}\n                                activities={this.props.activities}\n                            />) : null\n                    }\n                </Container >\n            </div >\n        )\n    }\n}\n\nexport default ManagerView\n\n\n","\n\n\nimport React, { Component } from 'react';\nimport ManagerView from \"./ManagerView\"\n\n\nclass ManagerController extends Component {\n\n    state = {\n        manager: {},\n        salespeople: [],\n        prospects: [],\n        activities: []\n    }\n\n\n    componentDidMount() {\n        fetch(`https://calm-dawn-96008.herokuapp.com/managers/${localStorage.getItem(\"user\")}`)\n            .then(r => r.json())\n            .then(m => {\n\n                this.setState({ manager: m })\n            })\n    }\n\n    allActivities = () => {\n        fetch(`https://calm-dawn-96008.herokuapp.com/activities`)\n            .then(r => r.json())\n            .then(a => {\n                this.setState({ activities: a })\n            })\n    }\n\n    allSalespeople = () => {\n\n        fetch(`https://calm-dawn-96008.herokuapp.comsalesreps`)\n            .then(r => r.json())\n            .then(m => {\n                this.setState({ salespeople: m })\n            })\n    }\n\n    allProspect = () => {\n\n        fetch(`https://calm-dawn-96008.herokuapp.com/prospects`)\n            .then(r => r.json())\n            .then(m => {\n                this.setState({ prospects: m })\n            })\n    }\n\n    updateUser = (event, firstName, lastName, email, id) => {\n\n        fetch(`https://calm-dawn-96008.herokuapp.com/managers/${id}`, {\n            method: 'PATCH',\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({\n\n                \"first_name\": firstName,\n                \"last_name\": lastName,\n                \"email\": email\n\n            })\n        })\n            .then(r => r.json())\n            .then(m => {\n                this.setState({ manager: m })\n            })\n    }\n\n    updateSalesRep = (event, firstName, lastName, email, id) => {\n\n        fetch(`https://calm-dawn-96008.herokuapp.com/salesreps/${id}`, {\n            method: 'PATCH',\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({\n\n                \"first_name\": firstName,\n                \"last_name\": lastName,\n                \"email\": email\n\n            })\n        })\n            .then(r => r.json())\n\n            .then(s => {\n\n                this.allSalespeople()\n            })\n    }\n\n\n    updateProspect = (event, firstName, lastName, phone, email, status, id) => {\n\n        fetch(`https://calm-dawn-96008.herokuapp.com/prospects/${id}`, {\n\n            method: 'PATCH',\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({\n\n                \"first_name\": firstName,\n                \"last_name\": lastName,\n                \"phone\": phone,\n                \"email\": email,\n                \"status\": status\n\n\n            })\n        })\n            .then(r => r.json())\n\n            .then(s => {\n                this.allProspect()\n            })\n    }\n\n\n\n    deleteRep(sp_id) {\n        if (window.confirm('Are you sure?')) {\n            fetch(`https://calm-dawn-96008.herokuapp.com/salesreps/${sp_id}`, {\n                method: 'DELETE',\n                header: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                }\n            })\n\n                .then(s => {\n                    this.allSalespeople()\n                })\n        }\n    }\n\n\n    deleteProspect(ps_id) {\n        if (window.confirm('Are you sure?')) {\n            fetch(`https://calm-dawn-96008.herokuapp.com/prospects/${ps_id}`, {\n                method: 'DELETE',\n                header: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                }\n            })\n\n                .then(s => {\n                    this.allProspect()\n                })\n        }\n    }\n\n    createSalesperson = (salesperson) => {\n\n        fetch(\"https://calm-dawn-96008.herokuapp.com/salesreps\", {\n\n            method: \"POST\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({\n                \"salesrep\": {\n                    first_name: salesperson.firstName,\n                    last_name: salesperson.lastName,\n                    email: salesperson.email,\n                    password: salesperson.password,\n                    username: salesperson.username,\n                    manager_id: this.state.manager.id\n                }\n            })\n        }).then(m => {\n            this.allSalespeople()\n        })\n\n    }\n\n    createProspect = (pro) => {\n\n        fetch(\"https://calm-dawn-96008.herokuapp.com/prospects\", {\n\n            method: \"POST\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({\n                \"first_name\": pro.firstName,\n                \"last_name\": pro.lastName,\n                \"email\": pro.email,\n                \"status\": pro.status,\n                \"phone\": pro.phone,\n                \"created_by\": this.state.manager.first_name + \" \" + this.state.manager.last_name\n            })\n        }).then(m => {\n            this.allProspect()\n        })\n\n    }\n\n    createActivity = (a) => {\n\n        fetch(\"https://calm-dawn-96008.herokuapp.com/activities\", {\n\n            method: \"POST\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({\n                \"activity\": {\n                    \"name\": a.name,\n                    \"prospect_id\": a.prospect_id,\n                    \"prospect_name\": a.prospect_name,\n                    \"description\": a.description,\n                    \"created_by\": this.state.manager.first_name + \" \" + this.state.manager.last_name,\n                    \"status\": a.status\n                }\n\n\n            })\n        }).then(m => {\n\n        })\n\n    }\n\n\n\n    render() {\n        return (\n            <ManagerView\n                manager={this.state.manager}\n                prospects={this.state.prospects}\n                salespeople={this.state.salespeople}\n                activities={this.state.activities}\n                updateUser={this.updateUser}\n                updateSalesRep={this.updateSalesRep}\n                allSalespeople={this.allSalespeople}\n                allProspect={this.allProspect}\n                updateProspect={this.updateProspect}\n                createSalesperson={this.createSalesperson}\n                deleteRep={this.deleteRep}\n                deleteProspect={this.deleteProspect}\n                createProspect={this.createProspect}\n                createActivity={this.createActivity}\n                allActivities={this.allActivities}\n\n            />\n        )\n    }\n\n\n}\n\nexport default ManagerController","\nimport React, { Component } from 'react';\nimport { Nav, Navbar } from 'react-bootstrap';\nimport { NavLink, withRouter } from \"react-router-dom\";\n\n\nclass NavBar extends Component {\n\n\n  logout = () => {\n    localStorage.clear()\n    this.props.updateUser(null)\n  }\n  render() {\n\n    return (\n\n      <div id=\"nv\">\n        \n       \n        {\n          this.props.logged_in === true ? (\n            <Navbar\n              id='navm'\n              bg=\"light\"\n              variant=\"light\"\n            >\n\n              <Navbar.Brand\n                \n                href=\"/login\">PMT\n                </Navbar.Brand>\n              <Nav className=\"mr-auto\">\n                <Nav.Link href=\"/logout\"\n                  as={NavLink}\n                  to=\"/login\"\n                  active={this.props.location.pathname === \"/managers\"}\n                  onClick={this.logout}\n                >  logout</Nav.Link>\n\n              </Nav>\n\n            </Navbar>\n            \n\n          ) : (\n              <Navbar\n                bg=\"light\"\n                variant=\"light\"\n                as={NavLink}\n                to=\"/login\"\n                active={this.props.location.pathname === \"/login\"}>\n                <Navbar.Brand href=\"#home\">PMT</Navbar.Brand>\n                <Nav className=\"mr-auto\">\n                  <Nav.Link href=\"/login\">login</Nav.Link>\n                </Nav>\n               \n              </Navbar>\n            )\n        }\n        \n      </div>\n\n\n    )\n\n  }\n\n\n}\n\nexport default withRouter(NavBar);\n\n","\n\n\nimport React, { Component } from 'react';\nimport { Button, Form, Modal, Col } from 'react-bootstrap';\n\n\nclass Login extends Component {\n\n\n  state = {\n    username: \"\",\n    password: \"\",\n    title: \"\"\n  };\n\n  handleChange = (e) => {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n\n  }\n\n  handleLoginSubmit = () => {\n    //make a fetch call\n    fetch(`https://calm-dawn-96008.herokuapp.com/login`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n\n      },\n      body: JSON.stringify({\n        \"username\": this.state.username,\n        \"password\": this.state.password,\n        \"title\": this.state.title,\n      }),\n      redirect: 'follow'\n    })\n      .then(res => res.json())\n      .then(data => {\n        if (data.authenticated) {\n          localStorage.setItem(\"token\", data.token)\n          localStorage.setItem(\"user\", data.user.id)\n          this.props.updateUser(data.user)\n        } else {\n          alert(\"Incorrect username or password\")\n        }\n      })\n  };\n\n\n  render() {\n\n    return (\n      <div>\n      <h1 id=\"name\"> Prospect Managerment Tracker </h1> \n\n      <Modal.Dialog id=\"login\" >\n        <Modal.Header>\n          <Modal.Title>Login</Modal.Title>\n        </Modal.Header>\n\n        <Modal.Body>\n          <Form\n            size=\"mini\"\n            key=\"mini\"\n            loading={this.props.authenticatingUser}\n            error={this.props.failedLogin}\n          >\n            <Form.Group controlId=\"formGridState\">\n              <Form.Label>Title</Form.Label>\n              <Form.Control as=\"select\"\n                defaultValue=\"Choose...\"\n                onChange={this.handleChange}\n                name=\"title\">\n\n                <option>Title...</option>\n                <option>salesperson</option>\n                <option>manager</option>\n\n              </Form.Control>\n            </Form.Group>\n            <Form.Group\n              controlId=\"formBasicUserName\">\n              <Form.Label>username</Form.Label>\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Enter username\"\n                name=\"username\"\n                onChange={this.handleChange}\n              />\n\n            </Form.Group>\n\n            <Form.Group controlId=\"formBasicPassword\">\n              <Form.Label>Password</Form.Label>\n              <Form.Control\n                type=\"password\"\n                placeholder=\"Password\"\n                name=\"password\"\n                onChange={this.handleChange}\n              />\n            </Form.Group>\n            <Button\n              variant=\"primary\"\n              onClick={(event) => {\n                this.handleLoginSubmit()\n              }}>\n              summit\n                              </Button>\n          </Form>\n        </Modal.Body>\n\n      </Modal.Dialog>\n      \n      </div>\n    )\n  }\n}\n\nexport default Login\n\n\n\n\n\n\n\n","\nimport React, { Component } from 'react';\n\nimport AllSalesProspectView from \"./AllSalesProspectView\"\nimport ActivityView from \"./ActivityView\"\nimport { Button, Figure, Form, ListGroup, Modal,Image, Card, ListGroupItem, Container, Row, Col } from 'react-bootstrap';\n\n\nclass SalesrepsView extends Component {\n\n    state = {\n        salespersonList: false,\n        prospectList: false,\n        activitiesList: false,\n        handleShowHideSPEdit: false,\n        firstName: '',\n        lastName: '',\n        email: ''\n\n    }\n\n\n\n    prospectList = () => {\n        this.setState({\n            prospectList: !this.state.prospectList,\n           \n            activitiesList: false\n\n        })\n    }\n\n\n    activitiesList = () => {\n        this.setState({\n            activitiesList: !this.state.activitiesList,\n            prospectList: false,\n           \n        })\n    }\n\n    handleShowHideSPEdit() {\n        this.setState({\n            showHide: !this.state.showHide\n        })\n    }\n\n    salespersonList = () => {\n        this.setState({\n            salespersonList: !this.state.salespersonList\n        })\n    }\n\n\n    prospectList = () => {\n        this.setState({\n            prospectList: !this.state.prospectList\n        })\n    }\n\n\n\n    render() {\n\n        return (\n\n\n            <div >\n\n\n                <Container >\n                    <Row id=\"wht\">\n                        <div>\n                            <Col id=\"spp\">\n                                <Card style={{ width: '25rem' }}>\n                                    <Card.Img variant=\"top\" src={this.props.salesrep.photo} />\n                                    <Card.Body>\n                                        <Card.Title>\n                                            {this.props.salesrep.first_name} {this.props.salesrep.last_name}\n                                        </Card.Title>\n                                    </Card.Body>\n                                    <ListGroup\n                                        className=\"list-group-flush\">\n                                        <ListGroupItem>\n                                            Title: {this.props.salesrep.title}\n                                        </ListGroupItem>\n                                        <ListGroupItem>\n                                            Email address: {this.props.salesrep.email}\n                                        </ListGroupItem>\n                                    </ListGroup>\n\n                                   \n                                  \n\n                                    <Card.Body>\n                                        \n\n                                        {this.state.showHide === true ?\n                                            (\n                                                <Modal\n                                                    show={this.state.showHide}\n                                                    onHide={this.handleShow}>\n\n                                                    <Modal.Header closeButton>\n                                                     <Modal.Title>Edit </Modal.Title>\n                                                    </Modal.Header>\n\n                                                    <Modal.Body>\n                                                        <Form>\n                                                            <Form.Group controlId=\"formGroupfirstName\">\n                                                                <Form.Label>First Name</Form.Label>\n                                                                <Form.Control\n                                                                    onChange={this.handleChange}\n                                                                    type=\"text\"\n                                                                    name=\"firstName\"\n                                                                    placeholder=\"First Name\"\n                                                                    value={this.state.firstName}\n                                                                />\n                                                            </Form.Group>\n\n                                                            <Form.Group controlId=\"formGrouplastName\">\n                                                            <Form.Label>First Name</Form.Label>\n                                                            <Form.Control\n                                                                onChange={this.handleChange}\n                                                                type=\"text\"\n                                                                name=\"firstName\"\n                                                                placeholder=\"First Name\"\n                                                                value={this.state.firstName}\n                                                            />\n                                                        </Form.Group>\n\n                                                            <Form.Group controlId=\"formGroupEmail\">\n                                                                <Form.Label>Last Name</Form.Label>\n                                                                <Form.Control\n                                                                    onChange={this.handleChange}\n                                                                    type=\"email\"\n                                                                    placeholder=\"Enter email\"\n                                                                    name=\"email\"\n                                                                    value={this.state.email || ''}\n                                                                />\n                                                            </Form.Group>\n\n                                                        </Form>\n\n                                                        <Modal.Footer>\n                                                            <Button\n                                                                variant=\"secondary\"\n                                                                onClick={() => this.handleShowHideSPEdit()\n                                                                }>\n                                                                Close\n                                                            </Button>\n\n                                                            <Button\n                                                                variant=\"primary\" onClick={(event) => {\n                                                                    this.props.updateUser(event, this.state.firstName, this.state.lastName, this.state.email, this.props.manager.id)\n                                                                    this.handleShowHideSPEdit()\n                                                                }}>\n                                                                Save Changes\n                                                            </Button>\n\n                                                        </Modal.Footer>\n                                                    </Modal.Body>\n                                                </Modal>) : null}\n                                    </Card.Body>\n                                </Card>\n                            </Col>\n                        </div>\n                    </Row>\n\n                    <Row>\n                        <div >\n                            <Col id=\"buttondiv\">\n                                <div >\n\n                                    <div id=\"new\"className=\"mb-2\">\n                                        <Button id=\"pb\"\n                                            onClick={this.prospectList}\n                                            variant=\"primary\" size=\"lg\" > All Prospects \n                                            </Button>\n                                            <Button id=\"ab\"\n                                            onClick={this.activitiesList}\n                                            variant=\"primary\"  size=\"lg\"  > All Activities\n                                        </Button>\n                                    </div>\n                                </div>\n                            </Col>\n                        </div>\n                    </Row>\n                    {\n\n\n                        this.state.prospectList === true ?\n                            (<AllSalesProspectView\n                                allProspect={this.props.allProspect}\n                                prospects={this.props.prospects}\n                                updateProspect={this.props.updateProspect}\n                                deleteProspect={this.props.deleteProspect}\n                                createProspect={this.props.createProspect}\n                                createActivity={this.props.createActivity}\n\n\n                            />) : null\n                        \n                    }\n\n\n                    {\n                        this.state.activitiesList === true ?\n                            (<ActivityView\n                                allActivities={this.props.allActivities}\n                                activities={this.props.activities}\n                            />) : null\n                    }\n\n\n\n\n\n                </Container>\n\n            </div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        )\n\n    }\n\n\n}\n\nexport default SalesrepsView\n\n","\n\n\n\nimport React, { Component } from 'react';\nimport SalesrepsView from \"./SalesrepsView\"\n\nclass SalesrepController extends Component {\n\n    // state = {\n    //     salesrep: {\n    //         manager_id: \"\",\n    //         id: \"\"\n    //     },\n\n    //     prospects: []\n    // }\n    state = {\n                salesrep: {},\n                manager_id: \"\",\n                  id: \"\",\n                 activities: [],\n                prospects: []\n            }\n        \n    componentDidMount() {\n\n        fetch(`https://calm-dawn-96008.herokuapp.com/${localStorage.getItem(\"user\")}`)\n            .then(r => r.json())\n            .then(s => {\n                this.setState({ salesrep: s })\n            })\n\n\n    }\n\n\n    allActivities = () => {\n        fetch(`https://calm-dawn-96008.herokuapp.com/activities`)\n            .then(r => r.json())\n            .then(a => {\n                this.setState({ activities: a })\n            })\n    }\n\n    \n\n    allProspect = () => {\n\n        fetch(`https://calm-dawn-96008.herokuapp.com/prospects?salesrep_id=${this.state.salesrep.id}`)\n            .then(r => r.json())\n            .then(m => {\n                this.setState({ prospects: m })\n            })\n    }\n\n\n    allActivities = () => {\n                fetch(`https://calm-dawn-96008.herokuapp.com/activities`)\n                    .then(r => r.json())\n                    .then(a => {\n                        this.setState({ activities: a })\n                    })\n            }\n\n\n    updateProspect = (event, firstName, lastName, phone, email, status, id) => {\n\n        fetch(`https://calm-dawn-96008.herokuapp.com/${id}`, {\n\n            method: 'PATCH',\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({\n\n                \"first_name\": firstName,\n                \"last_name\": lastName,\n                \"phone\": phone,\n                \"email\": email,\n                \"status\": status\n\n\n            })\n        })\n            .then(r => r.json())\n\n            .then(s => {\n\n                this.allProspect()\n            })\n    }\n\n    deleteProspect(ps_id) {\n        if (window.confirm('Are you sure?')) {\n            fetch(`https://calm-dawn-96008.herokuapp.com/${ps_id}`, {\n                method: 'DELETE',\n                header: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                }\n            })\n\n                .then(s => {\n                    this.allProspect()\n                })\n        }\n    }\n    createProspect = (pro) => {\n\n        fetch(\"https://calm-dawn-96008.herokuapp.com/prospects\", {\n\n            method: \"POST\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({\n                \"first_name\": pro.firstName,\n                \"last_name\": pro.lastName,\n                \"email\": pro.email,\n                \"status\": pro.status,\n                \"phone\": pro.phone,\n                \"created_by\": this.state.salesrep.first_name + \" \" + this.state.salesrep.last_name,\n                \"manager_id\": this.state.salesrep.manager_id,\n                \"salesrep_id\": this.state.salesrep.id,\n            })\n        }).then(m => {\n            this.allProspect()\n        })\n\n    }\n    createActivity = (a) => {\n\n        fetch(\"https://calm-dawn-96008.herokuapp.com/activities\", {\n\n            method: \"POST\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({\n\n                \"name\": a.name,\n                \"prospect_id\": a.prospect_id,\n                \"description\": a.description,\n                \"status\": a.status,\n                \"prospect_name\": a.prospect_name,\n                \"created_by\": this.state.salesrep.first_name + \" \" + this.state.salesrep.last_name,\n                \n\n            })\n        }).then(m => {\n\n        })\n\n    }\n\n    updateUser = (firstName, lastName, email) => {\n\n        fetch(`https://calm-dawn-96008.herokuapp.com/salesreps/${localStorage.getItem(\"user\")}`, {\n            method: 'PATCH',\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({\n\n                \"first_name\": firstName,\n                \"last_name\": lastName,\n                \"email\": email\n\n            })\n        })\n            .then(r => r.json())\n            .then(s => {\n                this.setState({ salesrep: s })\n            })\n    }\n\n\n    render() {\n        return (\n            <div>\n\n\n                <SalesrepsView\n                    salesrep={this.state.salesrep}\n                    allProspect={this.allProspect}\n                    prospects={this.state.prospects}\n                    updateProspect={this.updateProspect}\n                    deleteProspect={this.deleteProspect}\n                    createProspect={this.createProspect}\n                    createActivity={this.createActivity}\n                    updateUser={this.updateUser}\n                    activities={this.state.activities}\n                  allActivities={this.allActivities}\n                />\n\n\n            </div>\n        )\n\n    }\n\n\n}\n\nexport default SalesrepController\n\n\n\n","\n\nimport logo from './logo.svg';\nimport './App.css';\nimport { Route, Switch, Redirect, withRouter } from 'react-router-dom'\nimport ManagerController from \"./components/ManagerController\";\nimport NavBar from \"./components/NavBar\";\nimport React, { Component } from 'react';\nimport Login from './Login';\nimport SalesrepController from './components/SalerepsController';\n\n\n\nclass App extends Component {\n\n  constructor() {\n    super()\n    this.state = {\n      user: null,\n      logged_in: false\n    }\n  }\n\n  //state changing callback\n  updateUser = (user) => {\n    this.setState({\n      user: user,\n      logged_in: !this.state.logged_in\n    })\n  }\n\n\n  render() {\n\n    return (\n      <div>\n        \n        \n \n        <NavBar logged_in={this.state.logged_in} updateUser={this.updateUser} />\n        {!this.state.loading ?\n          <Switch>\n             \n            <Route exact path=\"/\" render={() => <Redirect to=\"/pmt\" />} />\n          \n            <Route exact path=\"/pmt\" render={() => this.state.user !== null && this.state.user.title === 'manager' ?\n              <Redirect to='/manager/' /> : this.state.user !== null && this.state.user.title === 'Salesperson' ?\n                <Redirect to='/salesperson/' /> :\n                <Login updateUser={this.updateUser} />\n            } />\n\n            <Route path=\"/manager\" render={props =>\n              (<ManagerController {...props} user={this.state.user} />)\n            } />\n            <Route path=\"/salesperson/\" render={props =>\n              (<SalesrepController {...props} user={this.state.user} />)\n            } />\n\n            <Route path=\"/login\" render={props =>\n              (<Login {...props} />)\n            } />\n\n          </Switch> : null}\n      </div>\n    );\n  }\n}\n\n\n\nexport default withRouter(App)\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport { render } from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'semantic-ui-css/semantic.min.css'\n\nrender((\n\n    \n\n\n\n  <Router>\n  \n    <div>\n    \n        <App />\n      </div>\n    </Router>\n  \n), document.getElementById('root'));\n\nreportWebVitals();\n\n\n\n\n\n\n\n"],"sourceRoot":""}